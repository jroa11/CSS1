{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Roa_HW1","provenance":[],"authorship_tag":"ABX9TyN0asTvfPgeePNDYUY42i4a"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"9J5Kd2F9poe0"},"source":["# Problem set for week of Jan 4th, 2021, CSS1\r\n","## Juan Roa\r\n","\r\n","*   Cognitive Science - Machine Learning and Neural Computation\r\n","*   Navy Blue / Maroon\r\n","*   I enjoying playing tennis and video games\r\n","\r\n","I **can** code and I will be excellent at it!\r\n","\r\n"]},{"cell_type":"markdown","metadata":{"id":"1lSs9g4DsEh_"},"source":["### Asks to put my name into a variable and print it alone, and in a sentence."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TuyQLkjrUDkA","executionInfo":{"status":"ok","timestamp":1609986310050,"user_tz":480,"elapsed":635,"user":{"displayName":"Juan Roa","photoUrl":"","userId":"06918161443370291542"}},"outputId":"df0f7755-8146-4017-f882-239618354508"},"source":["name = 'Juan'\r\n","print(name)\r\n","print('Hi, my name is', name)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Juan\n","Hi, my name is Juan\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TO3y4m-0sQQS"},"source":["### Data manipulation - altering/cleaning up a string"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5KBgAuGqRK_","executionInfo":{"status":"ok","timestamp":1609986644262,"user_tz":480,"elapsed":549,"user":{"displayName":"Juan Roa","photoUrl":"","userId":"06918161443370291542"}},"outputId":"10a0f9c5-5ddd-4d06-9439-e180380881ed"},"source":["wack =  \" jOhn sERenCes  \"\r\n","\r\n","# strips all white space, prints result\r\n","wack = wack.strip()\r\n","print(wack)\r\n","\r\n","# capitalizes first letter, prints result\r\n","wack = wack.capitalize()\r\n","print(wack)\r\n","\r\n","# converts name into all lowercase, prints result\r\n","wack = wack.lower()\r\n","print(wack)\r\n","\r\n","#converts name into all uppercase, prints result\r\n","wack = wack.upper()\r\n","print(wack)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["jOhn sERenCes\n","John serences\n","john serences\n","JOHN SERENCES\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AHCvgg-UrcVj","executionInfo":{"status":"ok","timestamp":1609986661568,"user_tz":480,"elapsed":429,"user":{"displayName":"Juan Roa","photoUrl":"","userId":"06918161443370291542"}},"outputId":"beaffc8d-903c-4348-d4a2-e929762c0012"},"source":["import this"],"execution_count":7,"outputs":[{"output_type":"stream","text":["The Zen of Python, by Tim Peters\n","\n","Beautiful is better than ugly.\n","Explicit is better than implicit.\n","Simple is better than complex.\n","Complex is better than complicated.\n","Flat is better than nested.\n","Sparse is better than dense.\n","Readability counts.\n","Special cases aren't special enough to break the rules.\n","Although practicality beats purity.\n","Errors should never pass silently.\n","Unless explicitly silenced.\n","In the face of ambiguity, refuse the temptation to guess.\n","There should be one-- and preferably only one --obvious way to do it.\n","Although that way may not be obvious at first unless you're Dutch.\n","Now is better than never.\n","Although never is often better than *right* now.\n","If the implementation is hard to explain, it's a bad idea.\n","If the implementation is easy to explain, it may be a good idea.\n","Namespaces are one honking great idea -- let's do more of those!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N62PLak-rtoZ"},"source":[""],"execution_count":null,"outputs":[]}]}